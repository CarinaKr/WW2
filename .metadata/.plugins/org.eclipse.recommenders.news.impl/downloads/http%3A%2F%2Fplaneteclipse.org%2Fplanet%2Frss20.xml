<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Kichwa Coders: Getting Started With Gerrit on Eclipse CDT</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1914</guid>
	<link>https://kichwacoders.com/2017/05/03/getting-started-with-gerrit-on-eclipse-cdt/</link>
	<description>&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;This is a guest post from Yannick Mayeur, a computer science student at &lt;a href=&quot;http://www.iut-blagnac.fr/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IUT Blagnac&lt;/a&gt; who is currently doing open-source work experience with &lt;a href=&quot;https://kichwacoders.com/about/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Kichwa Coders&lt;/a&gt;. It was originally one of his weekly write-ups which can be found &lt;a href=&quot;https://github.com/yannick-mayeur/BlogPosts&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You are probaly familiar with the pull request system of &lt;strong&gt;GitHub&lt;/strong&gt; that programmers use to contribute to an open-source project. &lt;strong&gt;Gerrit&lt;/strong&gt; (named after its designer Gerrit Rietveld) is basically an improved version of this system. Gerrit allows the committer to give more precise feedback on each line of code edited, and allows other members of the team to review those changes. Gerrit is used by the &lt;a href=&quot;https://www.eclipse.org/cdt/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse CDT&lt;/a&gt; community. In this blog post I will show you how to efficiently get started with it.&lt;/p&gt;
&lt;h2&gt;The required tools &amp;amp; knowledge&lt;/h2&gt;
&lt;p&gt;Having Git is basically all you need to clone the sources, and push them. If you want to edit them in a good environment use the &lt;a href=&quot;https://eclipse.org/downloads/packages/release/Neon/3&quot;&gt;Eclipse JAVA IDE&lt;/a&gt;. Knowing the basics of Git is also required, though I think you could pick up Git as you go along with a bit of trial and error.&lt;/p&gt;
&lt;h2&gt;How to get the sources of CDT&lt;/h2&gt;
&lt;p&gt;Cloning the sources to your computer is an easy but essential task.&lt;/p&gt;
&lt;p&gt;The link of the repository is: git://git.eclipse.org/gitroot/cdt/org.eclipse.cdt&lt;/p&gt;
&lt;p&gt;To clone use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git://git.eclipse.org/gitroot/cdt/org.eclipse.cdt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have the files, go to &lt;a href=&quot;https://bugs.eclipse.org/bugs/&quot;&gt;Bugzilla&lt;/a&gt; and find a bug you want to fix.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFour.md#pushing-the-changes-to-gerrit&quot; id=&quot;user-content-pushing-the-changes-to-gerrit&quot;&gt;&lt;/a&gt;Pushing the changes to Gerrit&lt;/h2&gt;
&lt;p&gt;Now comes the tricky part. In order for you to be able to push your change a few things have to be respected.&lt;span id=&quot;more-1914&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can only make one commit per change&lt;/li&gt;
&lt;li&gt;You have to sign off your commit using: &lt;code&gt;git commit -s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You must sign the &lt;a href=&quot;https://www.eclipse.org/legal/ECA.php&quot;&gt;ECA&lt;/a&gt; with the same email adress you use for Git&lt;/li&gt;
&lt;li&gt;Your commit must have a Change-ID. In order for your commit to automatically add a Change-ID you can install a hook. To install a hook go into the root directory of the project and execute the following command:&lt;br /&gt;
&lt;code&gt;curl -Lo.git/hooks/commit-msg &lt;a href=&quot;http://review.example.com/tools/hooks/commit-msg&quot; rel=&quot;nofollow&quot;&gt;http://review.example.com/tools/hooks/commit-msg&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the Gerrit remote, by using one of the following links: &lt;a href=&quot;http://git.eclipse.org:29418/cdt/org.eclipse.cdt.git&quot;&gt;http://git.eclipse.org:29418/cdt/org.eclipse.cdt.git&lt;/a&gt; or ssh://commiterId@git.eclipse.org:29418/cdt/org.eclipse.cdt.git if you are using SSH. Add the remote with the following command: &lt;code&gt;git remote add linkOfRepo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When all this is done you can push them with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push gerrit HEAD:refs/for/master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An Eclipse commiter will go through your changes and review them. You will be notified by email once this review is done. If the change is accepted, well done! If not, you will have to make any requested changes before pushing again but you will need to keep the exact same Change-ID.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFour.md#collaborative-work&quot; id=&quot;user-content-collaborative-work&quot;&gt;&lt;/a&gt;Collaborative work&lt;/h2&gt;
&lt;p&gt;Working in collaboration with someone on Git ain’t the easiest thing! So here are some tips and tricks I would have liked to know before I got started.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are working with someone on the same Gerrit change, you can add this to your commit message, so both of you get credit:&lt;br /&gt;
&lt;code&gt;also-by name &amp;lt;email&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To get what your collaborator has pushed to Gerrit whilst also retaining your changes you can use Cherry Pick.
&lt;p&gt;&lt;a href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/ressource/w4-1.png&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;cherry-pick&quot; src=&quot;https://github.com/yannick-mayeur/BlogPosts/raw/master/ressource/w4-1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It may happen that conflicts arise – you can manually merge the confilicted files and continue the Cherry Pick with:&lt;br /&gt;
&lt;code&gt;git cherry-pick --continue&lt;/code&gt;.&lt;br /&gt;
Merge yours and your colleague’s commit by squashing the commits with: &lt;code&gt;git rebase -i HEAD~2&lt;/code&gt; and changing &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;squash&lt;/code&gt; on the second commit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;When you are working on an open-source project within an active community such as Eclipse CDT, commits happen quite frequently. If you want your change to be on the lastest version of the project you may have to rebase it. Here’s how to do it:
&lt;ul&gt;
&lt;li&gt;Checkout master&lt;/li&gt;
&lt;li&gt;Pull the changes&lt;/li&gt;
&lt;li&gt;Get back to your branch and do: &lt;code&gt;git rebase master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFour.md#conclusion&quot; id=&quot;user-content-conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Gerrit is an improved pull-request system but the improvement comes with a harder “getting-started” phase. You indeed have to work a bit harder to push your first change to Gerrit, install a hook, understand how to work with a collaborator, etc. But in the end the positive aspects outweigh the negative: the very useful chain of feedback, and the fact that you don’t have to fork the project make it better for big projects like CDT. Good Luck!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1914/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1914/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1914&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 May 2017 11:46:16 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Observing Papyrus-RT</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=639</guid>
	<link>https://papyrusuml.wordpress.com/2017/05/01/observing-papyrus-rt/</link>
	<description>&lt;p&gt;My minions from Queen’s University are keeping busing with ME-RT!&lt;/p&gt;
&lt;p&gt;They will be presenting a &lt;a href=&quot;https://papyrusuml.wordpress.com/2017/02/08/papyrus-rt-in-argentina/&quot;&gt;paper in Argentina&lt;/a&gt; and now they have created an easy way to observe what goes on in a Papyrus for Real Time generated executable!&lt;/p&gt;
&lt;p&gt;As a quick reminder, &lt;a href=&quot;https://www.eclipse.org/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt; is a version of me that enables modeling complex embedded systems with full code generation!&lt;/p&gt;
&lt;p&gt;To show you what they have done, my minions created a &lt;a href=&quot;https://youtu.be/EbMIgEX9O58&quot;&gt;YouTube Video&lt;/a&gt; of the result of their work.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/academia/&quot;&gt;academia&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/embedded/&quot;&gt;embedded&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/modeling/&quot;&gt;modeling&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/research/&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=639&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 01 May 2017 11:00:22 +0000</pubDate>
</item>
<item>
	<title>Geniutec: CodeFully for Full-stack Development — the Chocolate Aisle of Your Dreams!</title>
	<guid isPermaLink="false">https://www.genuitec.com/?p=513801</guid>
	<link>https://www.genuitec.com/codefully/</link>
	<description>&lt;p&gt;Have you ever walked into a candy store and secretly wished that the whole thing belonged to you?  Probably many of us did when we were kids.  But in reality you were a chocolate lover, so all you really wanted was that enormous chocolate aisle that had everything to make your heart content — from […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.genuitec.com/codefully/&quot; rel=&quot;nofollow&quot;&gt;CodeFully for Full-stack Development — the Chocolate Aisle of Your Dreams!&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.genuitec.com&quot; rel=&quot;nofollow&quot;&gt;Genuitec&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 28 Apr 2017 20:06:05 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: IoT developer survey : my 2 cents one year later …</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=4639</guid>
	<link>https://paolopatierno.wordpress.com/2017/04/28/iot-developer-survey-my-2-cents-one-year-later/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;As last year, I have decided to write a blog post about my point of view on the &lt;strong&gt;IoT developer survey&lt;/strong&gt; from the &lt;a href=&quot;http://iot.eclipse.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation&lt;/a&gt; (IoT Working Group) with &lt;a href=&quot;http://iot.ieee.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IEEE&lt;/a&gt;, &lt;a href=&quot;http://agile-iot.eu/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Agile IoT&lt;/a&gt; and the &lt;a href=&quot;http://www.theinternetofthings.eu/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IoT Council&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;From my point of view, the final report gives always interesting insights on where the IoT business is going and about that, &lt;a href=&quot;https://twitter.com/IanSkerrett&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Ian Skerrett&lt;/a&gt; (Vice President of Marketing at Eclipse Foundation) has already analyzed the results, available &lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, writing a great &lt;a href=&quot;https://ianskerrett.wordpress.com/2017/04/19/iot-developer-trends-2017-edition/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I want just to add 2 more cents on that …&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Industry adoption …&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It’s clear that industries are adopting IoT and there is a big increment for industrial automation, smart cities, energy management, building automation, transportation, healthcare and so on. IoT is becoming “real” even if, as we will see in the next paragraphs, it seems that we are &lt;strong&gt;still in a prototyping stage&lt;/strong&gt;. A lot of companies are investing on that but few of them have real solutions running in the field. Finally, from my point of view, it could be great to add more information about countries because I think that there is a big difference on how and where every country is investing for IoT.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;The concerns …&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Security is always the big concern&lt;/strong&gt; but, as Ian said, interoperability and connectivity are on a downward trend; I agree with him saying that all the available middleware solutions and the IoT connectivity platforms are solving these problems. The great news is that all of them &lt;strong&gt;support different open and standard protocols&lt;/strong&gt; (MQTT, AMQP but even HTTP) that is the way to go for having &lt;strong&gt;interoperability&lt;/strong&gt;; at same time we are able to connect a lot of different devices, supporting different protocols, so the &lt;strong&gt;connectivity&lt;/strong&gt; problem is addressed as well.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Coming back to security, the survey shows that much more software developers are involved on building IoT solutions even because all the stuff they mostly use are SSL/TLS and data encryption so at software level. From my point of view, some security concerns should be addressed at hardware level (using crypto-chip, TPM and so on) but this is an area where software developers have a lack of knowledge. It’s not a surprise because we know that IoT needs a lot of different knowledge from different people but the survey shows that in some cases not the “right” people are involved on developing IoT solution. Too much web and mobile developers are working on that, too few embedded developer with a real hardware knowledge.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Languages : finally a distinction !&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Last year, in my 2 cents, I asked for having a distinction on which side of an IoT solution we consider the most used programming languages. I’m happy to know that Eclipse Foundation got this suggestion so this year survey asked about languages used on constrained devices, gateway and cloud.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;iot_survey&quot; class=&quot;alignnone size-full wp-image-4737&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/04/iot_survey.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The results don’t surprise me : &lt;strong&gt;C is the most used language on “real” low constrained devices&lt;/strong&gt; and all the other languages from Java to Python are mostly used on gateways; JavaScript fits in the cloud mainly with NodeJS. In any case, NodeJS is not a language so my idea is that providing only JavaScript as possible answer was enough even because other than using a server-side framework like NodeJS the other possibility is using JavaScript in “function as a service” platforms (i.e. Lambda from AWS, Azure Functions and so on) that are mostly based on NodeJS. Of course, &lt;strong&gt;the most used language in the cloud is Java&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;What about OS ?&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Linux is the most used OS&lt;/strong&gt; for both constrained devices and IoT gateways but … here a strange thing comes in my mind. On “real” constrained devices that are based on MCUs (i.e. Cortex-Mx) you can run few specific Linux distros (i.e. uCLinux) and not a full Linux distro so it’s strange that Linux wins on constrained devices but then when the survey shows what distros are used, uCLinux has a very low percentage. My guess is that a lot of software developers don’t know what a constrained device is &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;On constrained devices I expect that developers uses “no OS” (programming on bare metal) or a really tiny RTOS but not something closed to Linux.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;On gateways I totally agree with Linux but Windows is growing from last year.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Regarding the most used distros, the Raspbian victory shows that we are still in a prototyping stage. I can’t believe that developers are using Raspbian so the related Raspberry Pi hardware in production ! If it’s true … I’m scared about that ! If you know what are the planes, trains, building automation systems which are using something like that, please tell me … I have to avoid them &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Regarding the protocols …&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;From my point of view, the presence of TCP/IP in the connectivity protocols results is misleading. TCP/IP is a protocol used on top of Ethernet and Wi-Fi that are in the same results and we can’t compare them.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Regarding communication protocols, the current know-how is still leading; this is the reason why HTTP 1.1 is still on the top and HTTP 2.0 is growing. MQTT is there followed by CoAP, which is surprising me considering the necessity to have an HTTP proxy for exporting local traffic outside of a local devices network. AMQP is finding its own way and I think that in the medium/long term it will become a big player on that.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Cloud services&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In this area we should have a distinction because the question is pretty general but we know that you can use Amazon AWS or Microsoft Azure for IoT in two ways :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;as IaaS hosting your own solution or an open source one for IoT (i.e. just using provided virtual machines for running an IoT software stack)&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;as PaaS using the managed IoT platforms (i.e. AWS IoT, Azure IoT Hub, …)&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Having Amazon AWS on the top doesn’t surprise me but we could have more details on how it is used by the IoT developers.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The IoT business is growing and its adoption as well but looking at these survey results, most of the companies are still in a prototyping stage and few of them have a real IoT solution in the field.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It means that there is a lot of space for all to be invited to the party ! &lt;img alt=&quot;😀&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/4639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/4639/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=4639&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 28 Apr 2017 06:59:58 +0000</pubDate>
</item>
<item>
	<title>Orion: Orion Moved to Github</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=887</guid>
	<link>http://planetorion.org/news/2017/04/orion-moved-to-github/</link>
	<description>&lt;p&gt;You may have heard a couple of weeks back that &lt;a href=&quot;https://dev.eclipse.org/mhonarc/lists/orion-dev/msg04073.html&quot;&gt;Orion moved to Github&lt;/a&gt;. If not, then let this be the notice that Orion moved to Github!&lt;/p&gt;
&lt;p&gt;We are very excited about the move. The webmasters (Derek Toolan in particular) did an amazing job in making the transition seamless and simple.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;You are probably wondering to yourself: “why did you move, you had a great home at eclipse.org?”. The answer boils down to &lt;em&gt;simpler contributing&lt;/em&gt;. With Github, we felt that it would be far easier for committers, community and everyone in-between to be able to contribute to our project. No more Gerrit, confusing Gerrit configurations, or multiple remotes – just fork the project, make awesome code and open a pull request. Simple.&lt;/p&gt;
&lt;h2&gt;Ok, so where’s the code&lt;/h2&gt;
&lt;p&gt;All of the Orion source code can now be found in the following locations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.client&quot;&gt;orion.client&lt;/a&gt; – the Orion client code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.server&quot;&gt;orion.server&lt;/a&gt; – the Orion Java server code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.server.node&quot;&gt;orion.server.node&lt;/a&gt; – this will eventually be the home of the Node.js-based Orion server. Its currently empty while we sort out what code we want to separate out&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.electron&quot;&gt;orion.electron&lt;/a&gt; – this will eventually be the place we host our Electron-based app from. Currently it is empty while we sort out the builds, etc for the app&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What else do I need to know?&lt;/h2&gt;
&lt;p&gt;There are a few pretty important things that need to be addressed – especially if you are currently a contributor / committer to Orion.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure your Eclipse account is linked to your Github id. This is super-mega-ultra important, especially if you are a committer. The webmasters have provided a great wiki page that &lt;a href=&quot;https://wiki.eclipse.org/Social_Coding/Hosting_a_Project_at_GitHub#Moving_Your_Existing_Project_Repositories_to_GitHub&quot;&gt;talks more about this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure to update your repos / remotes. The old Git repositories have been set to read-only (as have the gerrits) – so make sure you update (or just re-clone) the repositories to avoid accidentally working against the old stuff.&lt;/li&gt;
&lt;li&gt;We are still using Bugzilla (so no changes in how to file / search / triage bugs). For the time being we will keep using it until we figure out a good flow for tracking issues across multiple repositories in GitHub.&lt;/li&gt;
&lt;li&gt;All contributions should be made as pull requests. The Gerrit instances for each old repository are set to read-only so they cannot be used, and if you really want to, you could still attach a patch to the bug you want to fix (but seriously, please use a pull request).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks again to everyone that helped make this possible.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</description>
	<pubDate>Thu, 27 Apr 2017 16:24:10 +0000</pubDate>
</item>
<item>
	<title>Benjamin Cabe: Unveiling the Eclipse IoT Open Testbeds</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=2850</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/EEkC9zDmh2c/unveiling-the-eclipse-iot-open-testbeds</link>
	<description>&lt;p&gt;Today we are &lt;a href=&quot;https://www.eclipse.org/org/press-release/20170426_iottestbeds.php&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;announcing&lt;/a&gt; the &lt;a href=&quot;https://iot.eclipse.org/testbeds&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse IoT Open Testbeds&lt;/a&gt;, a new initiative for driving adoption of open source and open standards in the industry.&lt;/p&gt;
&lt;p&gt;For more than five years, over 30 open source projects have been calling &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Eclipse IoT&lt;/strong&gt;&lt;/a&gt; home. Yet, it doesn’t necessarily make it easy for people to &lt;strong&gt;understand how to put all the pieces together&lt;/strong&gt;, from integration with sensors and hardware, to networking and connectivity, to cloud computing and enterprise integration.&lt;/p&gt;
&lt;p&gt;More often than not, I am asked about where to find blueprints or reference architectures for IoT, and how one is expected to leverage open source software such as what Eclipse IoT has to offer. These are very legitimate questions as building any IoT solution requires much more than just open source software components.&lt;/p&gt;
&lt;p&gt;I believe the &lt;strong&gt;Eclipse Open IoT Testbeds&lt;/strong&gt; are a unique approach to answering these kind of questions, especially since this is the first time IoT leading companies are effectively &lt;strong&gt;developing the testbeds in open source&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Open Source FTW!&lt;/h2&gt;
&lt;p&gt;Creating testbeds that demonstrate how a particular set of technologies can be used is certainly not a new idea, I’ll give you that. What is unique with the approach we are taking, though, is that &lt;strong&gt;we are making the testbeds available in open source&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means that you can really learn firsthand how all the pieces of an IoT solution are being put together to solve a real business case, as well as experiment with the actual code and dive into the architecture.&lt;/p&gt;
&lt;p&gt;Over time I certainly expect people will start forking the testbeds’ code to create their own extensions and, even better, will contribute them back to the community.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-2854&quot; height=&quot;157&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/asset-tracking-testbed-header-1024x256.jpg&quot; width=&quot;628&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Open Testbed for Asset Tracking&lt;/h1&gt;
&lt;p&gt;The&lt;strong&gt; &lt;a href=&quot;https://iot.eclipse.org/testbeds/asset-tracking&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;first testbed we have been working on is around Asset Tracking Management&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, we are showing how to &lt;strong&gt;track valuable assets&lt;/strong&gt; (think expensive/valuable parcels such as artwork) in real-time in order to optimize their transport, and in particular&lt;strong&gt; minimize the costs due to spoilage, damage or delays&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/asset-tracking-value-proposition.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-2866&quot; height=&quot;146&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/asset-tracking-value-proposition-1024x241.png&quot; width=&quot;621&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The testbed features Eclipse open source projects such as &lt;a href=&quot;https://eclipse.org/kura&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Kura&lt;/a&gt;, &lt;a href=&quot;https://eclipse.org/kapua&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Kapua&lt;/a&gt;, &lt;a href=&quot;https://eclipse.org/kapua&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Paho&lt;/a&gt; or &lt;a href=&quot;https://eclipse.org/che&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Che&lt;/a&gt;, but is of course also leveraging other technologies and commercial offerings – like any solution should, right?&lt;/p&gt;
&lt;p&gt;Head over to the &lt;strong&gt;&lt;a href=&quot;https://iot.eclipse.org/testbeds/asset-tracking/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Asset Tracking testbed webpage&lt;/a&gt;&lt;/strong&gt; to learn how, to name a few, OpenShift, Zulu Embedded, Samsung ARTIK, and more, have been integrated to demonstrate a full end-to-end IoT solution, all the way from data collection to complex event processing, to exposing information to 3rd parties through open APIs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/architecture-diagram-e1493299672882.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-2858&quot; height=&quot;200&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/architecture-diagram-1024x341.png&quot; width=&quot;600&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;What’s next?&lt;/h1&gt;
&lt;p&gt;The Asset Tracking Open Testbed is our first take at demonstrating how companies are building real IoT Solutions today.&lt;/p&gt;
&lt;p&gt;We are already planning to create other testbeds around e.g Smart Manufacturing, and therefore are inviting anyone interested in existing or future testbeds to join us at &lt;a href=&quot;https://iot.eclipse.org/testbeds&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://iot.eclipse.org/testbeds&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Join us at Red Hat Summit and IoT World 2017!&lt;/h1&gt;
&lt;p&gt;If you are attending Red Hat Summit (May 2-4, Boston) or IoT World 2017 (May 16-18, Santa Clara), please make sure to stop by our Asset Tracking Testbed Demo, see it run live, and understand better the contribution each partner has been making to the testbed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-2863&quot; height=&quot;161&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/May-2-4-2017-Boston-MA-300x161.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
 &lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/EEkC9zDmh2c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 14:44:59 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Eclipse IoT Open Testbeds</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/GTmsZQAPDx4/20170426_iottestbeds.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/GTmsZQAPDx4/20170426_iottestbeds.php</link>
	<description>Announcing the creation of the Eclipse IoT Open Testbeds, an initiative to drive adoption of IoT open source and open standards.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/GTmsZQAPDx4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 13:05:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Release of Eclipse Kura 3.0 Drives Simplification of IoT Edge Computing</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/gB7lgcVXi5I/20170426_kura3.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/gB7lgcVXi5I/20170426_kura3.php</link>
	<description>Eclipse Kura 3.0 will be available for download in early May.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/gB7lgcVXi5I&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 12:30:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Program Ready for EclipseCon France 2017</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/H5MB7DarBtc/2017-06-21</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/H5MB7DarBtc/2017-06-21</link>
	<description>See the program, and register by May 12 for the best price.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/H5MB7DarBtc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 09:10:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Building a real-time web app with Angular/Ngrx and Vert.x</title>
	<guid isPermaLink="true">http://vertx.io/blog/building-a-real-time-web-app-with-angular-ngrx-and-vert-x</guid>
	<link>http://vertx.io/blog/building-a-real-time-web-app-with-angular-ngrx-and-vert-x</link>
	<description>&lt;article&gt;&lt;p&gt;Nowadays, there are multiple tech stacks to build a real-time web app. What are the best choices to build real-time Angular client apps, connected to a JVM-based backend? This article describes an Angular+Vertx real-time architecture with a Proof of Concept demo app.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;this is a re-publication of the following &lt;a href=&quot;https://medium.com/@benorama/building-a-realtime-web-app-with-angular-ngrx-and-vert-x-a5381c0397a1&quot;&gt;Medium post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Welcome to the real-time web!&lt;/strong&gt; It’s time to move on from traditional synchronous HTTP request/response architectures to reactive apps with connected clients (ouch… that’s a lot of buzzwords in just one sentence)!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Real-time app&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/data-in-motion.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image source: &lt;a href=&quot;https://www.voxxed.com&quot;&gt;https://www.voxxed.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To build this kind of app, &lt;a href=&quot;https://www.meteor.com&quot;&gt;MeteorJS&lt;/a&gt; is the new cool kid on the block (v1.0 released in october 2014): &lt;strong&gt;a full stack Javascript platform to build connected-client reactive applications&lt;/strong&gt;. It allows JS developers to build and deploy amazing modern web and mobile apps (iOS/Android) in no time, using a unified backend+frontend code within a single app repo. That’s a pretty ambitious approach but it requires a very opinionated and highly coupled JS tech stack and it’s still a pretty niche framework.&lt;/p&gt;
&lt;p&gt;Moreover, we are a Java shop on the backend. At AgoraPulse, we rely heavily on :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; and &lt;a href=&quot;http://ionicframework.com&quot;&gt;Ionic&lt;/a&gt; for the JS frontend (with a shared business/data architecture based on &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;Ngrx&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; and &lt;a href=&quot;https://grails.org&quot;&gt;Grails&lt;/a&gt; ecosystem for the JVM backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So my question is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the best choices to build real-time Angular client apps, connected to a JVM-based backend these days?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our requirements are pretty basic. We don’t need full Meteor’s end-to-end application model.
We just want to be able to :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build a reactive app with an event bus on the JVM, and&lt;/li&gt;
&lt;li&gt;extend the event bus down to the browser to be able to publish/subscribe to real-time events from an Angular app.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;server-side-jvm-&quot;&gt;Server side (JVM)&lt;/h3&gt;
&lt;p&gt;Reactive apps is a hot topic nowadays and there are many great libs/platforms to build this type of event-driven architecture on the JVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lightbend.com&quot;&gt;Lightbend&lt;/a&gt; platform (Play, Akka, Scala),&lt;/li&gt;
&lt;li&gt;Spring &lt;a href=&quot;http://projectreactor.io&quot;&gt;Project Reactor&lt;/a&gt; (integrated into Grails 3.0).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;client-side&quot;&gt;Client side&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; and &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; are the two most popular framework right now to build modern JS apps. Most platforms use &lt;a href=&quot;https://github.com/sockjs/sockjs-client&quot;&gt;SockJS&lt;/a&gt; to handle real-time connections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-web/groovy/&quot;&gt;Vertx-web&lt;/a&gt; provides a SockJS server implementation with an event bus bridge and a &lt;a href=&quot;http://vertx.io/docs/vertx-web/groovy/#_sockjs_event_bus_bridge&quot;&gt;vertx-evenbus.js&lt;/a&gt; client library (very easy to use),&lt;/li&gt;
&lt;li&gt;Spring provides websocket SockJS support though Spring Messaging and Websocket libs (see an example &lt;a href=&quot;https://spring.io/guides/gs/messaging-stomp-websocket/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-choice-vert-x-angular&quot;&gt;Final choice: Vert.x + Angular&lt;/h3&gt;
&lt;p&gt;In the end, I’ve chosen to experiment with Vert.x for its excellent Groovy support, distributed event bus, scalability and ease of use.&lt;/p&gt;
&lt;p&gt;I enjoyed it very much. Let me show you the result of my experimentation which is the root of our real-time features coming very soon in AgoraPulse v6.0!&lt;/p&gt;
&lt;h2 id=&quot;why-vert-x-&quot;&gt;Why Vert.x?&lt;/h2&gt;
&lt;p&gt;Like other reactive platform, Vert.x is event driven and non blocking. It scales very well (even more that Node.js).&lt;/p&gt;
&lt;p&gt;Unlike other reactive platforms, Vert.x is polyglot: you can use Vert.x with multiple languages including Java, JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin.&lt;/p&gt;
&lt;p&gt;Unlike Node.js, Vert.x is a general purpose tool-kit and unopinionated. It’s a versatile platform suitable for many things: from simple network utilities, sophisticated modern web applications, HTTP/REST microservices or a full blown back-end message-bus application.&lt;/p&gt;
&lt;p&gt;Like other reactive platforms, it looks scary in the begining when you read the documentation… ;) But once you start playing with it, it remains fun and simple to use, especially with Groovy! Vert.x really allows you to build substantial systems without getting tangled in complexity.&lt;/p&gt;
&lt;p&gt;In my case, I was mainly interested by the distributed event-bus provided (a core feature of Vert.x).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To validate our approach, we built prototypes with the following goals:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;share and synchronize a common (Ngrx-based) state between multiple connected clients, and&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;distribute real-time (Ngrx-based) actions across multiple connected clients, which impact local states/reducers.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt; is a RxJS powered state management inspired by Redux for Angular apps. It’s currently the most popular way to structure complex business logic in Angular apps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Redux&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/redux.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/&quot;&gt;https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;proof-of-concept&quot;&gt;PROOF OF CONCEPT&lt;/h2&gt;
&lt;p&gt;Here is the repo of our initial proof of concept:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/benorama/ngrx-realtime-app&quot;&gt;http://github.com/benorama/ngrx-realtime-app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The repo is divided into two separate projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vert.x server app&lt;/strong&gt;, based on &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt; (version 3.3), managed by &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;, with a main verticle developed in &lt;a href=&quot;http://groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; lang.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Angular client app&lt;/strong&gt;, based on Angular (version 4.0.1), managed by &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; CLI with state, reducers and actions logic based on &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt; (version 2.2.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the demo, we are using the counter example code (actions and reducers) from &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The counter client business logic is based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CounterState&lt;/code&gt; interface, counter state model,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counterReducer&lt;/code&gt; reducer, counter state management based on dispatched actions, and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Increment&lt;/em&gt;, &lt;em&gt;decrement&lt;/em&gt; and &lt;em&gt;reset&lt;/em&gt; counter actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State is maintained server-side with a simple singleton &lt;code&gt;CounterService&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CounterService&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; INCREMENT = &lt;span class=&quot;hljs-string&quot;&gt;'[Counter] Increment'&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; DECREMENT = &lt;span class=&quot;hljs-string&quot;&gt;'[Counter] Decrement'&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; RESET = &lt;span class=&quot;hljs-string&quot;&gt;'[Counter] Reset'&lt;/span&gt;
    &lt;span class=&quot;hljs-typename&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;hljs-typename&quot;&gt;void&lt;/span&gt; handleEvent(event) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(event.type) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;INCREMENT:&lt;/span&gt;
                total++
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;DECREMENT:&lt;/span&gt;
                total--
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;RESET:&lt;/span&gt;
                total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;client-state-initialization-through-request-response&quot;&gt;Client state initialization through Request/Response&lt;/h3&gt;
&lt;p&gt;Initial state is initialized with simple &lt;strong&gt;request/response&lt;/strong&gt; (or send/reply) on the event bus.
Once the client is connected, it sends a request to the event bus at the address &lt;strong&gt;counter::total&lt;/strong&gt;. The server replies directly with the value of &lt;code&gt;CounterService&lt;/code&gt; total and the client dispatches locally a &lt;em&gt;reset&lt;/em&gt; action with the total value from the reply.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Vertx Request Response&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/vertx-request-response.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&quot;&gt;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract of the corresponding code (from &lt;code&gt;AppEventBusService&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;initializeCounter() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.send(&lt;span class=&quot;hljs-string&quot;&gt;'counter::total'&lt;/span&gt;, body, (error, message) =&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle reply&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (message &amp;amp;&amp;amp; message.body) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; localAction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CounterActions.ResetAction();
            localAction.payload = message.body; &lt;span class=&quot;hljs-comment&quot;&gt;// Total value&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.store.dispatch(localAction);
        }
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;actions-distribution-through-publish-subscribe&quot;&gt;Actions distribution through Publish/Subscribe&lt;/h3&gt;
&lt;p&gt;Action distribution/sync uses the &lt;strong&gt;publish/subscribe&lt;/strong&gt; pattern.&lt;/p&gt;
&lt;p&gt;Counter actions are published from the client to the event bus at the address &lt;strong&gt;counter::actions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Any client that have subscribed to &lt;strong&gt;counter::actions&lt;/strong&gt; address will receive the actions and redispatch them locally to impact app states/reducers.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Vertx Publish Subscribe&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/vertx-publish-subscribe.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&quot;&gt;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract of the corresponding code (from &lt;code&gt;AppEventBusService&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;publishAction(action: RemoteAction) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (action.publishedByUser) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This action has already been published&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
    action.publishedByUser = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.currentUser;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.publish(action.eventBusAddress, action);
}
subscribeToActions(eventBusAddress: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.registerHandler(eventBusAddress, (error, message) =&amp;gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle message from subscription&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (message.body.publishedByUser === &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.currentUser) {
            &lt;span class=&quot;hljs-comment&quot;&gt;// Ignore action sent by current manager&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; localAction = message.body;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.store.dispatch(localAction);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The event bus publishing logic is achieved through a simple Ngrx Effects. Any actions that extend &lt;code&gt;RemoteAction&lt;/code&gt; class will be published to the event bus.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;@Injectable()
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; AppEventBusEffects {

    &lt;span class=&quot;hljs-constructor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;(private actions$: Actions, private appEventBusService: AppEventBusService) &lt;/span&gt;{}
    &lt;span class=&quot;hljs-comment&quot;&gt;// Listen to all actions and publish remote actions to account event bus&lt;/span&gt;
    @Effect({dispatch: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) remoteAction$ = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.actions$
        .filter(action =&amp;gt; action &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; RemoteAction &amp;amp;&amp;amp; action.publishedByUser == &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)
        .do((action: RemoteAction) =&amp;gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.appEventBusService.publishAction(action);
        });

    @Effect({dispatch: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) login$ = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.actions$
        .ofType(UserActionTypes.LOGIN)
        .do(() =&amp;gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.appEventBusService.connect();
        });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see all of this in action by locally launching the server and the client app in two separate browser windows.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Demo app screen&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/demo-app-screen.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bonus: the demo app also includes user status (offline/online), based of the event bus connection status.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The counter state is shared and synchronized between connected clients and each local action is distributed in real-time to other clients.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mission accomplished!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Typescript version of Vertx EventBus Client &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; The app uses our own Typescript version of the official JS &lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Vertx EventBus Client&lt;/a&gt;. It can be found &lt;a href=&quot;https://gist.github.com/benorama/93373c3c1c3574732d6cc1b4754aab9f&quot;&gt;here&lt;/a&gt;, any feedback, improvement suggestions are welcome!&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.4.4.AM3 for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.4.4.am3-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/4.4.4.am3-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.4.4.AM3 (Developer Milestone 3) build for Eclipse Neon.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.AM3.html&quot;&gt;JBoss Tools 4.4.4 AM3&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.4.4.AM3.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;pipeline-builds-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#pipeline-builds-support&quot;&gt;&lt;/a&gt;Pipeline builds support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pipeline based builds are now supported by the OpenShift tooling.
      When creating an application, if using a template, if one of the builds is based on pipeline, you can view the detail
      of the pipeline:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-wizard.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When your application is deployed, you can see the details of the build configuration for the pipeline based builds:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline details&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-details.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;More to come as we are improving the pipeline support in the OpenShift tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 25 Apr 2017 14:09:02 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Results, results, results — IoT Developer Survey 2017</title>
	<guid isPermaLink="false">https://medium.com/p/8dc4e354a06d</guid>
	<link>https://medium.com/@roxanne.iot/results-results-results-iot-developer-survey-2017-8dc4e354a06d?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;In February &amp;amp; March 2017, we conducted the third annual &lt;a href=&quot;https://medium.com/@roxanne.iot/why-the-iot-developer-survey-matters-318b6123cbe7&quot;&gt;IoT Developer Survey&lt;/a&gt; and &lt;strong&gt;713 of you&lt;/strong&gt; took the time to complete it! Thank you for contributing to this initiative. It might only a small sample, but it gives many IoT community, companies, and individuals a glimpse into what is going on in the vast and continually changing world we call the Internet of Things.&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/49&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*n3EP0-yQayCK9jwQdd0W4g.png&quot; /&gt;&lt;/a&gt;If you thought of Carmen Sandiego when reading this question — you are awesome!&lt;/figure&gt;&lt;p&gt;Here are some quick survey highlights for you to devour:&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/9&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*HsrxzhSLBITuTzSBMaGd4g.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/5&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ldGRtTmbmf0FJl5oqM0HKQ.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/4&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*JfYKlNzF_MhlBngiV5wROQ.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/45&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*abPN3NeMLcs3uFQ9aiTk6g.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/7&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BaeO8PZlyF6m93DVRSts8Q.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/8&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*_hhFIizgad1R1bNxTVOozg.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/7&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*XYUuK_uS_8ORgMEkDLX3fA.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure&gt;&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017/45&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Um0GLZcY5zVgU-G6x0oVZA.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;✨ &lt;a href=&quot;https://drive.google.com/open?id=0B5rzKo7GChKeX0tkdmVlUW1ieG8&quot;&gt;Download images here&lt;/a&gt; ✨ &lt;a href=&quot;https://ianskerrett.wordpress.com/2017/04/19/iot-developer-trends-2017-edition/&quot;&gt;Read our full analysis&lt;/a&gt; ✨ &lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017&quot;&gt;View the slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Make your own opinion and tell us how you interpret the survey results! Tweet: &lt;a href=&quot;https://twitter.com/roxannejoncas&quot;&gt;@roxannejoncas&lt;/a&gt; &lt;a href=&quot;https://twitter.com/eclipseiot&quot;&gt;@EclipseIoT&lt;/a&gt; or leave a comment below!&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8dc4e354a06d&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 25 Apr 2017 09:50:22 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus Architecture Framework</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=614</guid>
	<link>https://papyrusuml.wordpress.com/2017/04/24/papyrus-architecture-framework/</link>
	<description>&lt;p&gt;For the upcoming Oxygen release, I am getting a new, improved architecture framework that is aligned with &lt;a href=&quot;http://www.iso-architecture.org/ieee-1471/&quot;&gt;ISO 42010&lt;/a&gt;.Now, I’m not (yet) an expert in this, but my minions are! And they have created a nice &lt;a href=&quot;https://www.youtube.com/watch?v=U62b2EQObRg&quot;&gt;YouTube video&lt;/a&gt; explaining what it does and what it provides to Toolsmiths&lt;/p&gt;
&lt;p&gt;Now, I’m not (yet) an expert in this, but my minions are! And they have created a nice YouTube video explaining what it does and what it provides to Toolsmiths.&lt;/p&gt;
&lt;p&gt;If you are a toolsmith for Me, hope to become one or are just curious, you must go see it (and the other &lt;a href=&quot;https://www.youtube.com/channel/UCxyPoBlZc_rKLS7_K2dtwYA&quot;&gt;Me videos on YouTube&lt;/a&gt;)!&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/dsml/&quot;&gt;DSML&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus/&quot;&gt;Papyrus&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-core/&quot;&gt;Papyrus Core&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/toolsmiths/&quot;&gt;toolsmiths&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/614/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/614/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=614&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 24 Apr 2017 11:00:00 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Host your own eclipse signing server</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-9070090987462011969</guid>
	<link>http://codeandme.blogspot.com/2017/04/host-your-own-eclipse-signing-server.html</link>
	<description>We handled &lt;a href=&quot;http://codeandme.blogspot.co.at/2013/07/tycho-10-signing-plugins-and-executables.html&quot; target=&quot;_blank&quot;&gt;signing plugins with tycho&lt;/a&gt; some time ago already. When working in a larger company you might want to keep your certificates and passphrases hidden from your developers. For such a scenario a signing server could come in handy.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://wiki.eclipse.org/CBI&quot; target=&quot;_blank&quot;&gt;eclipse CBI project&lt;/a&gt; provides such a server which just needs to get configured in the right way. Mikael Barbero &lt;a href=&quot;https://dev.eclipse.org/mhonarc/lists/cbi-dev/msg01568.html&quot; target=&quot;_blank&quot;&gt;posted a short howto&lt;/a&gt; on the mailing list, which should contain all you need. For a working setup example follow this tutorial.&lt;br /&gt;&lt;br /&gt;To have a test vehicle for signing we will reuse the &lt;a href=&quot;http://codeandme.blogspot.co.at/2012/12/tycho-build-4-building-features.html&quot; target=&quot;_blank&quot;&gt;tycho 4 tutorial&lt;/a&gt; source files.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Step 1: Get the service&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://repo.eclipse.org/service/local/artifact/maven/redirect?r=cbi&amp;amp;g=org.eclipse.cbi&amp;amp;a=jar-signing-service&amp;amp;v=LATEST&quot; target=&quot;_blank&quot;&gt;Download the latest service snapshot file&lt;/a&gt; and store it to a directory called &lt;i&gt;signingService&lt;/i&gt;. Next &lt;a href=&quot;https://repo.eclipse.org/service/local/artifact/maven/redirect?r=cbi&amp;amp;g=org.eclipse.cbi&amp;amp;a=jar-signing-service&amp;amp;c=tests&amp;amp;v=LATEST&quot; target=&quot;_blank&quot;&gt;download the test server&lt;/a&gt;, we will use it to create a temporary certificate and keystore.&lt;br /&gt;&lt;br /&gt;Finally we need a template configuration file. &lt;a href=&quot;http://git.eclipse.org/c/cbi/org.eclipse.cbi.git/plain/webservice/signing/jar/etc/jar-signing-service.properties&quot; target=&quot;_blank&quot;&gt;Download it&lt;/a&gt; and store it to &lt;i&gt;signingService/jar-signing-service.properties&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Step 2: A short test drive&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;Open a console and change into the &lt;i&gt;signingService&lt;/i&gt; folder. There execute:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;java -cp jar-signing-service-1.0.0-20170331.204711-10.jar:jar-signing-service-1.0.0-20170331.204711-10-tests.jar org.eclipse.cbi.webservice.signing.jar.TestServer&lt;/pre&gt;You should get some output giving you the local address of the signing service as long as the certificate store used:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;Starting test signing server at http://localhost:3138/jarsigner&lt;br /&gt;Dummy certificates, temporary files and logs are stored in folder: /tmp/TestServer-2590700922068591564&lt;br /&gt;Jarsigner executable is: /opt/oracle-jdk-bin-1.8.0.121/bin/jarsigner&lt;/pre&gt;We are not ready yet to sign code, but at least we can test if the server is running correctly. If you try to connect with a browser you should get a message that &lt;i&gt;HTTP method GET is not supported by this URL&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Step 3: Preparing the tycho project&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;We need some changes to our tycho project so it can make use of the signing server. Get the sources of the &lt;a href=&quot;http://codeandme.blogspot.co.at/2012/12/tycho-build-4-building-features.html&quot; target=&quot;_blank&quot;&gt;tycho 4 tutorial&lt;/a&gt; (checking out from git is fully sufficient) and add following code to &lt;i&gt;com.codeandme.tycho.releng/pom.xml&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br /&gt; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;properties&amp;gt;&lt;br /&gt;  &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;br /&gt; &amp;lt;/properties&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;pluginRepositories&amp;gt;&lt;br /&gt;  &amp;lt;pluginRepository&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;cbi&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;url&amp;gt;https://repo.eclipse.org/content/repositories/cbi-releases/&amp;lt;/url&amp;gt;&lt;br /&gt;  &amp;lt;/pluginRepository&amp;gt;&lt;br /&gt; &amp;lt;/pluginRepositories&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;build&amp;gt;&lt;br /&gt;  &amp;lt;plugins&amp;gt;&lt;br /&gt;   &amp;lt;!-- enable jar signing --&amp;gt;&lt;br /&gt;   &amp;lt;plugin&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.eclipse.cbi.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;eclipse-jarsigner-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;${eclipse.jarsigner.version}&amp;lt;/version&amp;gt;&lt;br /&gt;    &amp;lt;executions&amp;gt;&lt;br /&gt;     &amp;lt;execution&amp;gt;&lt;br /&gt;      &amp;lt;id&amp;gt;sign&amp;lt;/id&amp;gt;&lt;br /&gt;      &amp;lt;goals&amp;gt;&lt;br /&gt;       &amp;lt;goal&amp;gt;sign&amp;lt;/goal&amp;gt;&lt;br /&gt;      &amp;lt;/goals&amp;gt;&lt;br /&gt;      &amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt;&lt;br /&gt;     &amp;lt;/execution&amp;gt;&lt;br /&gt;    &amp;lt;/executions&amp;gt;&lt;br /&gt;    &amp;lt;configuration&amp;gt;&lt;br /&gt;     &amp;lt;signerUrl&amp;gt;http://localhost:3138/jarsigner&amp;lt;/signerUrl&amp;gt;&lt;br /&gt;    &amp;lt;/configuration&amp;gt;&lt;br /&gt;   &amp;lt;/plugin&amp;gt;&lt;br /&gt;   &lt;br /&gt;  &amp;lt;/plugins&amp;gt;&lt;br /&gt; &amp;lt;/build&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;/pre&gt;The code above shows purely additions to the &lt;i&gt;pom.xml&lt;/i&gt;, no sections were removed or replaced.&lt;br /&gt;&lt;br /&gt;You may try to build your project with maven already. As I had problems to connect to https://timestamp.geotrust.com/tsa my local build failed, even if maven reported SUCCESS.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Step 4: Configuring a productive instance&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;So lets get productive. Setting up your keystore with your certificates will not be handled by this tutorial, so I will reuse the keystore created by the test instance. Copy the &lt;i&gt;keystore.jks&lt;/i&gt; file from the temp folder to the &lt;i&gt;signingService&lt;/i&gt; folder. Then create a text file &lt;i&gt;keystore.pass&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;echo keystorePassword &amp;gt;keystore.pass&lt;/pre&gt;&lt;br /&gt;Now we need to adapt the &lt;i&gt;jar-signing-service.properties&lt;/i&gt; file to our needs:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;### Example configuration file&lt;br /&gt;&lt;br /&gt;server.service.pathspec=/jarsigner&lt;br /&gt;server.service.pathspec.versioned=false&lt;br /&gt;&lt;br /&gt;jarsigner.bin=/opt/oracle-jdk-bin-1.8.0.121/bin/jarsigner&lt;br /&gt;&lt;br /&gt;jarsigner.keystore=/somewhere/signingService/keystore.jks&lt;br /&gt;jarsigner.keystore.password=/somewhere/signingService/keystore.pass&lt;br /&gt;jarsigner.keystore.alias=acme.org&lt;br /&gt;&lt;br /&gt;jarsigner.tsa=http://timestamp.entrust.net/TSS/JavaHttpTS&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;By setting the versioned flag to &lt;i&gt;false&lt;/i&gt; in line 4 we simplify the service web address (details can be found in the sample properties file).&lt;/li&gt;&lt;li&gt;Set the jarsigner executable path in line 6 according to your local environment.&lt;/li&gt;&lt;li&gt;Lines 8-10 contain details about the keystore and certificate to use, you will need to adapt them, but above settings should result in a working build.&lt;/li&gt;&lt;li&gt;The change in line 12 was necessary at the time of writing this tutorial because of connection problems to https://timestamp.geotrust.com/tsa.&lt;/li&gt;&lt;/ul&gt;Run your service using&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;java -jar jar-signing-service-1.0.0-20170331.204711-10.jar&lt;/pre&gt;Remember that your productive instance now runs on port 8080, so adapt your &lt;i&gt;pom.xml&lt;/i&gt; accordingly.</description>
	<pubDate>Mon, 24 Apr 2017 10:03:19 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Roxanne Joncas: Eclipse IoT @ Red Hat Summit</title>
	<guid isPermaLink="false">https://medium.com/p/74a326dab852</guid>
	<link>https://medium.com/@roxanne.iot/eclipse-iot-red-hat-summit-74a326dab852?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;In less than two weeks, we will be at the &lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot;&gt;Red Hat Summit&lt;/a&gt; in Boston, MA.&lt;/p&gt;&lt;p&gt;We’re really excited! We will be involved in many aspects of the conference including the Red Hat IoT Partner Showcase, where we will be demoing something very cool! Stay tuned for the details.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/u/12c9446b8e55&quot;&gt;Benjamin Cabé&lt;/a&gt; will also be speaking at on May 2 @ 10 am during the Lightning Talks.&lt;/p&gt;&lt;p&gt;Plan to join this year’s &lt;a href=&quot;https://developers.redhat.com/blog/2017/04/12/perform-hands-on-real-world-iot-development-at-the-red-hat-summit-iot-codestarter/&quot;&gt;IoT CodeStarter&lt;/a&gt; starting on May 2 @ 6 pm to experience and use open source projects such as &lt;a href=&quot;https://www.eclipse.org/kura/&quot;&gt;Eclipse Kura&lt;/a&gt;, Eclipse Kura Wires and &lt;a href=&quot;http://eclipse.org/kapua&quot;&gt;Eclipse Kapua&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Stop by our demo station at the Red Hat IoT Partner Showcase to say hello!&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*D4zEc9byIlLSsVoSk8z7Sg.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=74a326dab852&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Apr 2017 15:31:55 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms – Day 6 – Custom Renderers</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=28093</guid>
	<link>http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms is a framework to efficiently build form-based web UIs. These UIs allow end users to enter, modify, and view data and are usually embedded within a business application. JSON Forms eliminates the need to write HTML templates and Javascript for databinding by hand. It supports the creation of customizable forms by leveraging the capabilities of JSON and &lt;/span&gt;&lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON schema&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and providing a simple and declarative way of describing forms. Forms are then rendered with a UI framework, currently one that is based on AngularJS. If you would like to know more about JSON Forms, the &lt;/span&gt;&lt;a href=&quot;http://jsonforms.io&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms homepage&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a good starting point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we wish to introduce the framework based on a real-world example application, a task tracker called “Make It happen”. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 1&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we described the overall requirements, from day 2 to 5, we have created a fully working form for the entity “Task”. If you would like to follow this blog series please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, where we will announce every new blog post regarding JSON Forms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far, on the previous days, we have created a fully functional form rendered in AngularJS, by simply using two schemata: a JSON Schema to define the underlying data and a UI Schema to specify the UI. JSON Forms provides a rendering component, which translates this two schemas into a AngularJS form, including data binding, validation, rule-based visibility, and so on. While this is very efficient, you may wonder what you should do if the form rendered by JSON Forms does not exactly look like what you expected. Let us have a look at the form we have so far:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12-1.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28095&quot; height=&quot;188&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12-1-300x188.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While the generic structure and the layout look pretty good, there are two controls, which could require some aesthetic improvement.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First, the checkbox for “done” is very small, we would rather have something like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image09.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-28096&quot; height=&quot;41&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image09.png&quot; width=&quot;40&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Second, the control for “rating” is just a plain number field, a rating would better be expressed by a control like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image02.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-28097&quot; height=&quot;32&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image02.png&quot; width=&quot;112&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Both improvements can be addressed by customizing existing renderers or adding new custom renderers to JSON Forms. This use case is actually not special at all, it is anticipated and fully supported. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In JSON Forms a renderer is only responsible for displaying one particular UI element, like a control or a horizontal layout. JSON Forms ships with default renderers for all UI schema elements. The default renderers are meant as a starting point, and therefore, it is very likely that you will add new renderers and extend existing ones.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The good news is that you still do not have to implement the complete form manually. Rather, you just need to add some code for the customized part. That means you can iteratively extend the framework with custom renderers, while the complete form remains fully functional. Let us have a quick look at the architecture of the JSON Forms rendering component. In fact there is not only one renderer, there is at least one renderer per concept of the UI schema. Renderers are responsible for translating the information of the UI schema and the data schema into a running HTML UI.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;All those renderers are registered at a renderer factory (see following diagram). For every renderer, there is a “Tester”, which decides, whether a certain renderer should be responsible for rendering a certain UI element. This can depend on the type of the UI schema element (e.g. all controls), on the type of the referenced data property (e.g. a renderer for all String properties), or even on the name of the data property (e.g. only the attribute “rating”).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image00.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28098&quot; height=&quot;149&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image00-300x149.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This architecture allows you to register renders in an extremely flexible way. If there are no custom renderers, the default renderer will be used. Please note, that JSON Forms supports renderers written in JS5, JS6, and Typescript. In the following, we will use Typescript.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So let’s customize the styling of the default renderer for the “done” attribute by CSS styling and by adding a custom renderer for the rating attribute. Therefore, we start with a customization of the CSS of the sample application. By adding the following style you can change the size of the checkbox of the done attribute alone:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;CSS&quot;&gt;#properties_done {
  width:35px;
  height:35px;
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Second we need a tester for the custom rating renderer, which should only be applied for the rating property:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JavaScript&quot;&gt;.run(['RendererService', 'JSONFormsTesters', function(RendererService, Testers) {
        RendererService.register('rating-control', Testers.and(
            Testers.schemaPropertyName('rating')
        ), 10);
    }])
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can see, the tester references a renderer, so the next step is to implement it:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JavaScript&quot;&gt;.directive('ratingControl', function() {
    return {
        restrict: 'E',
        controller: ['BaseController', '$scope', function(BaseController, $scope) {
            var vm = this;
            BaseController.call(vm, $scope);
            vm.max = function() {
                if (vm.resolvedSchema.maximum !== undefined) {
                    return vm.resolvedSchema.maximum;
                } else {
                    return 5;
                }
            };
        }],
        controllerAs: 'vm',
        templateUrl: './renderer/rating.control.html'
    };
})
&lt;/pre&gt; 
&lt;pre&gt;&amp;lt;jsonforms-control&amp;gt;
 &amp;lt;uib-rating
 id=&quot;{{vm.id}}&quot;
 readonly=&quot;vm.uiSchema.readOnly&quot;
 ng-model=&quot;vm.resolvedData[vm.fragment]&quot;
 max=&quot;vm.max()&quot;&amp;gt;&amp;lt;/uib-rating&amp;gt;
 &amp;lt;/uib-rating&amp;gt;
&amp;lt;/jsonforms-control&amp;gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please see &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/customrenderer&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details about implementing your own custom renderer in either JS5, JS6, or Typescript. After adding our CSS customization and the custom renderer to our project, we can see the result embedded in our form:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image07.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28100&quot; height=&quot;195&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image07-300x195.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that the data schema and the UI schema do not have to be adapted at all. JSON Forms facilitates a strict separation between the definition of a form and its rendering. That enables you to not only adapt the look and feel of your UI, but also render the same UI schema in different ways.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in implementing your own renderer or if you miss any feature in JSON Forms, please &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/support&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. If you are interested in trying out JSON Forms, please refer to the &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/firstform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Getting-Started tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This tutorial explains how to set up JSON Forms in your project as well as how you can try out the first steps on your own. If you would like to follow this blog series, please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. We will announce every new blog post on JSON Forms there.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;List of all available days to date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;Day 0 and 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;Day 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;Day 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot;&gt;Day 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot;&gt;Day 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=JSON+Forms+%26%238211%3B+Day+6+%26%238211%3B+Custom+Renderers&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&amp;amp;t=JSON+Forms+%26%238211%3B+Day+6+%26%238211%3B+Custom+Renderers&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angular/&quot; title=&quot;Angular Tag&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf-forms/&quot; title=&quot;emf forms Tag&quot;&gt;emf forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-forms/&quot; title=&quot;json forms Tag&quot;&gt;json forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angular/&quot; title=&quot;Angular Tag&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf-forms/&quot; title=&quot;emf forms Tag&quot;&gt;emf forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-forms/&quot; title=&quot;json forms Tag&quot;&gt;json forms&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 21 Apr 2017 09:28:58 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Technical Debt: How Do You Unfork a Fork?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1697</guid>
	<link>https://kichwacoders.com/2017/03/28/technical-debt-how-do-you-unfork-a-fork/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;filled_cirle_point_style_graph&quot; class=&quot; size-full wp-image-1906 aligncenter&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/filled_cirle_point_style_graph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Everyone knows how to fork that interesting open source project, it’s simple and handy to do. What’s not so easy to do is to merge back a fork that has over the years taken on a life of its own and for many reasons has diverged drastically from the original repo.&lt;/p&gt;
&lt;p&gt;This is a case study of an ongoing project we are doing with SWT XYGraph, a visualisation project that is now part of Eclipse Nebula. It is the story of a fork of SWT XYGraph maintained by Diamond Light Source, the UK’s national synchrotron. But mostly it is a story about the efforts to merge the fork, reduce technical debt, and work towards the goal of sharing software components for Science, a key goal of the Eclipse Science Working Group.&lt;span id=&quot;more-1697&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Know Your History&lt;/h2&gt;
&lt;p&gt;One of the first things in this project was to understand the history – spanning 8 years – of the fork.  We knew the Diamond fork was done before SWT XYGraph became part of Nebula and under the Eclipse Foundation umbrella. The fork was made in order to quickly add in a number of new features that required some fundamental architectural changes to the code base.&lt;/p&gt;
&lt;p&gt;However on looking through the history, we found there were more than just 2 forks involved. The original project had been developed as part of Control System Studio (CSS) from Oakridge National Labs. CSS had in turn been forked by Diamond and customised for the local facility. Even though SWT XYGraph had been contributed to the Eclipse Nebula project, the original repo and many, many forks were still out there: more than enough forks for a dinner party. I can’t explain it any further in words so will dump our illegible working diagram of it all here:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;forks&quot; class=&quot;alignnone size-large wp-image-1849&quot; height=&quot;1024&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/forks.jpg?w=768&amp;amp;h=1024&quot; width=&quot;768&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Patches were pulled across and merged across forks when it was straightforward to do so. But with so many forks, this was a case where git history really mattered. Anywhere the history was preserved it was straightforward to track the origins of a specific feature – much harder in the cases where the history was lost. Git history is important, always worth some effort to preserve.&lt;/p&gt;
&lt;h2&gt;Choose Your Approach Carefully&lt;/h2&gt;
&lt;p&gt;Deciding if it worthwhile to merge a big fork takes some consideration. The biggest question to ask is: Are the architectural changes fundamentally resolvable? (Not like Chromium’s fork of Webkit – &lt;a href=&quot;https://en.wikipedia.org/wiki/Blink_(web_engine)&quot; target=&quot;_blank&quot;&gt;Blink&lt;/a&gt;). If that is a yes, then it’s a case of trading off the long-term benefits for the short term pain. In this case, Diamond knew it was something they wanted to do, more a matter of timing and picking the correct approach.&lt;/p&gt;
&lt;p&gt;Together there seemed to be 2 main ways to tackle removing the fork that was part of a mature product in constant use at the scientific facility.&lt;/p&gt;
&lt;p&gt;Option 1: Create a branch and work in parallel to get the branch working with upstream version, then merge the branch.&lt;/p&gt;
&lt;p&gt;Option 2: Avoid a branch, but work to incrementally make the fork and upstream SWT XYGraph plug-ins identical, then make the switch over to the upstream version.&lt;/p&gt;
&lt;p&gt;Option 1 had been tried before without success; there were too many moving parts and it created too much overhead, and ironically another fork to maintain. So it was clear this time Option 2 would be the way forward.&lt;/p&gt;
&lt;h2&gt;Tools are Your Friend&lt;/h2&gt;
&lt;p&gt;The incremental merging of the two needed to be done in a deliberate, reproducible manner to make it easier to trace back any issues coming up. Here are the tools that were useful in doing this.&lt;/p&gt;
&lt;h3&gt;1. Git Diff&lt;/h3&gt;
&lt;p&gt;The first step was to get an idea of the scale of the divergence, both quantitatively and qualitatively.&lt;/p&gt;
&lt;p&gt;For quantity, a rough and ready measure was obtained by using git diff:&lt;/p&gt;
&lt;pre class=&quot;brush: bash; title: ; notranslate&quot;&gt;$ git diff --shorstat &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt;
399 files changed, 15648 insertions(+), 15368 deletions(-)

$ git diff &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt; | wc -l
37874
&lt;/pre&gt;
&lt;h3&gt;2. Eclipse IDE’s JDT formatter&lt;/h3&gt;
&lt;p&gt;Next, we needed to remove diffs that were just down to formatting. For this using Eclipse IDE and the quick &amp;amp; easy formatting. Select “src” folder, choose Source menu -&amp;gt; Format. All code formatted to Eclipse standard in one go.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;format_src_folder&quot; class=&quot;alignnone size-full wp-image-1880&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/format_src_folder.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Merge Tools&lt;/h3&gt;
&lt;p&gt;Then it was time to dive into the differences and group them into features, separating quick fixes from changes that broke APIs. For this we used the free and open &lt;a href=&quot;http://meldmerge.org/&quot; target=&quot;_blank&quot;&gt;meld&lt;/a&gt; on Linux.&lt;/p&gt;
&lt;h3&gt;3. EGit Goodness&lt;/h3&gt;
&lt;p&gt;Let’s say we found a line of code different in the fork. To work out where the feature had come from, we could use ‘&lt;a href=&quot;https://git-scm.com/docs/git-blame&quot; target=&quot;_blank&quot;&gt;git blame&lt;/a&gt;‘ but much nicer is the &lt;a href=&quot;http://www.vogella.com/tutorials/EclipseGit/article.html#see-git-information-line-by-line-aka-git-blame&quot; target=&quot;_blank&quot;&gt;eGit support in Eclipse IDE&lt;/a&gt;. Show annotations was regularly used to try to work out where that feature had come from, which fork it had been originally created on and then see if we could find any extra information such as bugzilla or JIRA tickets describing the feature. We were always grateful for code with good and helpful commit messages.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;egit_annotations.png&quot; class=&quot;alignnone size-full wp-image-1888&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/egit_annotations1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Bug Tracking Tools&lt;/h3&gt;
&lt;p&gt;In this case we were using two different bug trackers: Bugzilla on the Eclipse Nebula side of things and JIRA on the Diamond side of things. As part of the merge, we were contributing lots and lots of distinct features to Nebula, we had a parent issue: &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513865&quot; target=&quot;_blank&quot;&gt;Bug 513865&lt;/a&gt; to which we linked all the underlying fixes and features, aiming to keep each one distinct and standalone. At the time of writing that meant 21 dependent bugs.&lt;/p&gt;
&lt;h3&gt;4. Gerrits &amp;amp; Pull Requests&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://git.eclipse.org/r/#/q/project:nebula/org.eclipse.nebula+owner:jonah%2540kichwacoders.com&quot; target=&quot;_blank&quot;&gt;Gerrits&lt;/a&gt; were created for each bug for Eclipse Nebula. &lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/pull/11&quot; target=&quot;_blank&quot;&gt;Pull requests&lt;/a&gt; were created for each change going to Diamond’s DAWN (over 50 to date). Each was reviewed before being committed back. In many cases we took the opportunity to tidy code up or enhance it with things like standalone examples that could be used to demonstrate the feature.&lt;/p&gt;
&lt;h3&gt;5. Github Built-in Graphs&lt;/h3&gt;
&lt;p&gt;It was also good to use the built in Github built in Graphs  (on any repository click on ‘Graphs’ tab), first to see other forks out in the wild (&lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/network/members&quot; target=&quot;_blank&quot;&gt;Members tab&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;members&quot; class=&quot;alignnone size-full wp-image-1834&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/members.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then the ‘Network’ tab to keep track of the relationship with those forks compared to the main Diamond fork:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;networkgraph&quot; class=&quot;alignnone size-full wp-image-1833&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/networkgraph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Much nicer than our hand-drawn effort from earlier, though in this case not all the code being dealt with was in Github.&lt;/p&gt;
&lt;h2&gt;Win/Win&lt;/h2&gt;
&lt;p&gt;The work is ongoing and we are getting to the tricky parts – the key reasons the forks were created in the first place – to make fundamental changes to the architecture. This will require some conversations to understand the best way forward. Already with the work that has been done, there has been mutual benefits: Diamond get new features and bug fixes developed in the open source and Eclipse Nebula get new features and bug fixes developed at Diamond Light Source. The &lt;a href=&quot;https://wiki.eclipse.org/Nebula/Releases/1.3.0/NaN&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; for Eclipse Nebula shows off screenshots of all the new features as a result of this merge.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Nebula_N&amp;amp;N_1.3_-_improved_mouse_cursors&quot; class=&quot;alignnone size-full wp-image-1839&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/nebula_nn_1-3_-_improved_mouse_cursors.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Going forward this paves the way for Diamond to not only get rid of duplicate maintenance of &amp;gt;30,000 lines of Java code (according to &lt;a href=&quot;https://github.com/AlDanial/cloc&quot; target=&quot;_blank&quot;&gt;cloc&lt;/a&gt;), but to contribute some significant features they have developed that integrate with SWT XYGraph. In doing so with the Eclipse Science Working Group it make a great environment to collaborate in open source and make advancements that benefit all involved.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1697/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1697/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1697&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 20 Apr 2017 13:13:45 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Mastering Eclipse CDT</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/DaIrbBFq_nw/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/DaIrbBFq_nw/</link>
	<description>Learn all about Eclipse CDT, a fully functional C &amp;amp; C++ IDE for the Eclipse platform in this month's newsletter.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/DaIrbBFq_nw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 20 Apr 2017 11:10:00 +0000</pubDate>
</item>
<item>
	<title>Dirk Fauth: Access OSGi Services via web interface</title>
	<guid isPermaLink="false">http://blog.vogella.com/?p=7578</guid>
	<link>http://blog.vogella.com/2017/04/20/access-osgi-services-via-web-interface/</link>
	<description>&lt;p&gt;In this blog post I want to share a simple approach to make OSGi services available via web interface. I will show a simple approach that includes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embedding a &lt;a href=&quot;https://www.eclipse.org/jetty/&quot; target=&quot;_blank&quot;&gt;Jetty&lt;/a&gt;  Webserver in an OSGi application&lt;/li&gt;
&lt;li&gt;Registering a Servlet via OSGi DS using the HTTP Whiteboard specification&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will only cover this simple scenario here and will not cover accessing OSGi services via REST interface. If you are interested in that you might want to look at the &lt;a href=&quot;https://github.com/hstaudacher/osgi-jax-rs-connector&quot; target=&quot;_blank&quot;&gt;OSGi – JAX-RS Connector&lt;/a&gt;, which looks also very nice. Maybe I will look at this in another blog post. For now I will focus on embedding a Jetty Server and deploy some resources.&lt;/p&gt;
&lt;p&gt;I will skip the introduction on OSGi DS and extend the examples from my &lt;a href=&quot;http://blog.vogella.com/2016/06/21/getting-started-with-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Getting Started with OSGi Declarative Services&lt;/a&gt; blog. It is easier to follow this post when done the other tutorial first, but it is not required if you adapt the contents here to your environment.&lt;/p&gt;
&lt;p&gt;As a first step create a new project &lt;em&gt;org.fipro.inverter.http. &lt;/em&gt;In this project we will add the resources created in this tutorial. If you use PDE you should create a new &lt;em&gt;Plug-in Project&lt;/em&gt;, with Bndtools create a new &lt;em&gt;Bnd OSGi Project&lt;/em&gt; using the &lt;em&gt;Component Development&lt;/em&gt; template.&lt;/p&gt;
&lt;h2&gt;PDE – Target Platform&lt;/h2&gt;
&lt;p&gt;In PDE it is best practice to create a Target Definition so the work is based on a specific set of bundles and we don’t need to install bundles in our IDE. Follow these steps to create a Target Definition for this tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new target definition
&lt;ul&gt;
&lt;li&gt;Right click on project &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; → New → Other… → Plug-in Development → Target Definition&lt;/li&gt;
&lt;li&gt;Set the filename to &lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;i&gt;.target&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Initialize the target definition with: &lt;i&gt;Nothing&lt;/i&gt;&lt;i&gt;: Start &lt;/i&gt;&lt;i&gt;with&lt;/i&gt;&lt;i&gt; an &lt;/i&gt;&lt;i&gt;empty&lt;/i&gt; &lt;i&gt;target&lt;/i&gt; &lt;i&gt;definition&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add a new &lt;em&gt;Software Site&lt;/em&gt; in the opened Target Definition Editor by clicking &lt;em&gt;Add…&lt;/em&gt; in the &lt;em&gt;Locations&lt;/em&gt; section
&lt;ul&gt;
&lt;li&gt;Select &lt;em&gt;Software Site&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Software Site &lt;em&gt;http://download.eclipse.org/releases/oxygen&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Disable &lt;em&gt;Group by Category&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select the following entries
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Equinox Core SDK&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Equinox Compendium SDK&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jetty Http Server Feature&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optional: Add a new Software Site to include JUnit to the Target Definition (only needed in case you followed all previous tutorials on OSGi DS or want to integrate JUnit tests for your services)
&lt;ul&gt;
&lt;li&gt;Software Site &lt;em&gt;http://download.eclipse.org/tools/orbit/R-builds/R20170307180635/repository&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;JUnit Testing Framework&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save your work and activate the target platform by clicking &lt;em&gt;Set as Target Platform&lt;/em&gt; in the upper right corner of the Target Definition Editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bndtools – Repository&lt;/h2&gt;
&lt;p&gt;Using Bndtools is different as you already know if you followed my previous blog posts. To be also able to follow this blog post by using Bndtools, I will describe the necessary steps here.&lt;/p&gt;
&lt;p&gt;We will use Apache Felix in combination with Bndtools instead of Equinox. This way we don’t need to modify the predefined repository and can start without further actions. The needed Apache Felix bundles are already available.&lt;/p&gt;
&lt;h2&gt;PDE – Prepare project dependencies&lt;/h2&gt;
&lt;p&gt;We will prepare the project dependencies in advance so it is easier to copy and paste the code samples to the project. Within the Eclipse IDE the Quick Fixes would also support adding the dependencies afterwards of course.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;MANIFEST.MF&lt;/em&gt; file of the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project and switch to the &lt;em&gt;Dependencies&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following two dependencies on the &lt;em&gt;Imported Packages&lt;/em&gt; side:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;javax.servlet (3.1.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;javax.servlet.http (3.1.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter (1.0.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.osgi.service.component.annotations (1.3.0)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mark &lt;em&gt;org.osgi.service.component.annotations&lt;/em&gt; as &lt;em&gt;Optional&lt;/em&gt; via &lt;em&gt;Properties…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add the upper version boundaries to the &lt;em&gt;Import-Package&lt;/em&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bndtools – Prepare project dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;bnd.bnd&lt;/em&gt; file of the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project and switch to the &lt;em&gt;Build&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following bundles to the &lt;em&gt;Build Path&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.http.felix.jetty&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.http.felix.servlet-api&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.api&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create a &lt;code&gt;Servlet&lt;/code&gt; implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new package &lt;code&gt;org.fipro.inverter.http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new class &lt;code&gt;InverterServlet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service=Servlet.class,
    property= &quot;osgi.http.whiteboard.servlet.pattern=/invert&quot;,
    scope=ServiceScope.PROTOTYPE)
public class InverterServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Reference
    private StringInverter inverter;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        String input = req.getParameter(&quot;value&quot;);
        if (input == null) {
            throw new IllegalArgumentException(&quot;input can not be null&quot;);
        }
        String output = inverter.invert(input);

        resp.setContentType(&quot;text/html&quot;);
        resp.getWriter().write(
            &quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Result is &quot; + output + &quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
        }

}&lt;/pre&gt;
&lt;p&gt;Let’s look at the implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is a typical &lt;code&gt;Servlet&lt;/code&gt; implementation that extends &lt;code&gt;javax.servlet.http.HttpServlet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It is also an OSGi Declarative Service that is registered as service of type &lt;code&gt;javax.servlet.Servlet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The service has PROTOTYPE scope&lt;/li&gt;
&lt;li&gt;A special property &lt;code&gt;osgi.http.whiteboard.servlet.pattern&lt;/code&gt; is set. This configures the context path of the &lt;code&gt;Servlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It references the &lt;code&gt;StringInverter&lt;/code&gt; OSGi service from the previous tutorial via field reference. And yes since Eclipse Oxygen this is also supported in Equinox (I wrote about this &lt;a href=&quot;http://blog.vogella.com/2017/03/15/osgi-declarative-services-news-in-eclipse-oxygen/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;PDE – Launch the example&lt;/h2&gt;
&lt;p&gt;Before explaining the details further, launch the example to see if our servlet is available via standard web browser. For this we create a launch configuration, so we can start directly from the IDE.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the menu entry &lt;em&gt;Run -&amp;gt; Run Configurations…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In the tree view, right click on the &lt;em&gt;OSGi Framework&lt;/em&gt; node and select &lt;em&gt;New&lt;/em&gt; from the context menu&lt;/li&gt;
&lt;li&gt;Specify a name, e.g. &lt;em&gt;OSGi Inverter Http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deselect All&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select the following bundles&lt;br /&gt;
(note that we are using Eclipse Oxygen, in previous Eclipse versions &lt;em&gt;org.apache.felix.scr&lt;/em&gt; and &lt;em&gt;org.eclipse.osgi.util&lt;/em&gt; are not required)&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Application bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.api&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.provider&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.runtime&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.shell&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.console&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OSGi framework and DS bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.scr&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.ds&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi.services&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi.util&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equinox Http Service and Http Whiteboard&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.http.jetty&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.http.servlet&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jetty&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;javax.servlet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.continuation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.io&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.security&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.server&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.servlet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.util&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure that &lt;em&gt;Default Auto-Start&lt;/em&gt; is set to &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Switch to the Arguments tab
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-Dorg.osgi.service.http.port=8080&lt;/code&gt; to the VM arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Run&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
If you include the above bundles in an Eclipse RCP application, ensure that you auto-start the &lt;em&gt;org.eclipse.equinox.http.jetty&lt;/em&gt; bundle to automatically start the Jetty server. This can be done on the &lt;em&gt;Configuration&lt;/em&gt; tab of the Product Configuration Editor.&lt;/p&gt;
&lt;p&gt;If you now open a browser and go to the URL &lt;a href=&quot;http://localhost:8080/invert?value=Eclipse&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/invert?value=Eclipse&lt;/a&gt; you should get a response with the inverted output.&lt;/p&gt;
&lt;h2&gt;Bndtools – Launch the example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;launch.bndrun&lt;/em&gt; file in the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project&lt;/li&gt;
&lt;li&gt;On the &lt;em&gt;Run&lt;/em&gt; tab add the following bundles to the &lt;em&gt;Run Requirements&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.provider&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.http.jetty&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Resolve&lt;/em&gt; to ensure all required bundles are added to the &lt;em&gt;Run Bundles&lt;/em&gt; via auto-resolve&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-Dorg.osgi.service.http.port=8080&lt;/code&gt; to the &lt;em&gt;JVM Arguments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Run OSGi&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Http Service &amp;amp; Http Whiteboard&lt;/h2&gt;
&lt;p&gt;Now why is this simply working? We only implemented a servlet and provided it as OSGi DS. And it is “magically” available via web interface. The answer to this is the OSGi Http Service Specification and the Http Whiteboard Specification. The &lt;a href=&quot;https://www.osgi.org/developer/specifications/&quot; target=&quot;_blank&quot;&gt;OSGi Compendium Specification&lt;/a&gt; R6 contains the &lt;em&gt;Http Service Specification Version 1.2&lt;/em&gt; (Chapter 102 – Page 45) and the &lt;em&gt;Http Whiteboard Specification Version 1.0&lt;/em&gt; (Chapter 140 – Page 1067).&lt;/p&gt;
&lt;p&gt;The purpose of the Http Service is to provide access to services on the internet or other networks for example by using a standard web browser. This can be done by registering servlets or resources to the Http Service. Without going too much into detail, the implementation is similar to an embedded web server, which is the reason why the default implementations in Equinox and Felix are based on Jetty.&lt;/p&gt;
&lt;p&gt;To register servlets and resources to the Http Service you know the Http Service API very well and you need to retrieve the Http Service and directly operate on it. As this is not every convenient, the Http Whiteboard Specification was introduced. This allows to register servlets and resources via the &lt;a href=&quot;http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf&quot; target=&quot;_blank&quot;&gt;Whiteboard Pattern&lt;/a&gt;, without the need to know the Http Service API in detail. I always think about the whiteboard pattern as a “&lt;em&gt;don’t call us, we will call you&lt;/em&gt;” pattern. That means you don’t need to register servlets on the Http Service directly, you will provide it as a service to the service registry, and the Http Whiteboard implementation will take it and register it to the Http Service.&lt;/p&gt;
&lt;p&gt;Via Http Whiteboard it is possible to register:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servlets&lt;/li&gt;
&lt;li&gt;Servlet Filters&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;li&gt;Servlet Listeners&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will show some examples to be able to play around with the Http Whiteboard service.&lt;/p&gt;
&lt;h3&gt;Register Servlets&lt;/h3&gt;
&lt;p&gt;An example on how to register a servlet via Http Whiteboard is shown above. The main points are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The servlet needs to be registered as OSGi service of type &lt;code&gt;javax.servlet.Servlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The component property &lt;em&gt;osgi.http.whiteboard.servlet.pattern&lt;/em&gt; needs to be set to specify the request mappings.&lt;/li&gt;
&lt;li&gt;The service scope should be PROTOTYPE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For registering servlets the following component properties are supported. (see OSGi Compendium Specification Release 6 – Table 140.4):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Component Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.asyncSupported&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the servlet supports the asynchronous operation mode. Allowed values are true and false independent of case. Defaults to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.errorPage&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Register the servlet as an error page for the error code and/or exception specified; the value may be a fully qualified exception type name or a three-digit HTTP status code in the range 400-599. Special values 4xx and 5xx can be used to match value ranges. Any value not being a three-digit number is assumed to be a fully qualified exception class name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.name&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The name of the servlet. This name is used as the value of the &lt;code&gt;javax.servlet.ServletConfig.getServletName()&lt;/code&gt;&lt;br /&gt;
method and defaults to the fully qualified class name of the service object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.pattern&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Registration pattern(s) for the servlet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;servlet.init.*&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Properties starting with this prefix are provided as init parameters to the &lt;code&gt;javax.servlet.Servlet.init(ServletConfig)&lt;/code&gt; method. The &lt;em&gt;servlet.init.&lt;/em&gt; prefix is removed from the parameter name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Http Whiteboard service needs to call &lt;code&gt;javax.servlet.Servlet.init(ServletConfig)&lt;/code&gt; to initialize the servlet before it starts to serve requests, and when it is not needed anymore &lt;code&gt;javax.servlet.Servlet.destroy()&lt;/code&gt; to shut down the servlet. If more than one Http Whiteboard implementation is available in a runtime, the &lt;code&gt;init()&lt;/code&gt; and &lt;code&gt;destroy()&lt;/code&gt; calls would be executed multiple times, which violates the Servlet specification. It is therefore recommended to use the PROTOTYPE scope for servlets to ensure that every Http Whiteboard implementation gets its own service instance.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
In a controlled runtime, like an RCP application that is delivered with one Http Whiteboard implementation and that does not support installing bundles at runtime, the usage of the PROTOTYPE scope is not required. Actually such a runtime ensures that the servlet is only instantiated and initialized once. But if possible it is recommended that the PROTOTYPE scope is used.&lt;/p&gt;
&lt;p&gt;To register a servlet as an error page, the service property &lt;em&gt;osgi.http.whiteboard.servlet.errorPage&lt;/em&gt; needs to be set. The value can be either a three-digit  HTTP error code, the special codes 4xx or 5xx to specify a range or error codes, or a fully qualified exception class name. The service property &lt;em&gt;osgi.http.whiteboard.servlet.pattern &lt;/em&gt;is not required for servlets that provide error pages.&lt;/p&gt;
&lt;p&gt;The following snippet shows an error page servlet that deals with &lt;code&gt;IllegalArgumentExceptions&lt;/code&gt; and the HTTP error code 500. It can be tested by calling the inverter servlet without a query parameter.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service=Servlet.class,
    property= {
        &quot;osgi.http.whiteboard.servlet.errorPage=java.lang.IllegalArgumentException&quot;,
        &quot;osgi.http.whiteboard.servlet.errorPage=500&quot;
    },
    scope=ServiceScope.PROTOTYPE)
public class ErrorServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType(&quot;text/html&quot;);
        resp.getWriter().write(
        &quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You need to provide an input!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
    }
}&lt;/pre&gt;
&lt;h3&gt;Register Filters&lt;/h3&gt;
&lt;p&gt;Via servlet filters it is possible to intercept servlet invocations. They are used to modify the &lt;code&gt;ServletRequest&lt;/code&gt; and &lt;code&gt;ServletResponse&lt;/code&gt; to perform common tasks before and after the servlet invocation.&lt;/p&gt;
&lt;p&gt;The example below shows a servlet filter that adds a simple header and footer on each request to the servlet with the &lt;em&gt;/invert&lt;/em&gt; pattern:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = &quot;osgi.http.whiteboard.filter.pattern=/invert&quot;,
    scope=ServiceScope.PROTOTYPE)
public class SimpleServletFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig)
            throws ServletException { }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        response.setContentType(&quot;text/html&quot;);
        response.getWriter().write(&quot;&amp;lt;b&amp;gt;Inverter Servlet&amp;lt;/b&amp;gt;&amp;lt;p&amp;gt;&quot;);
        chain.doFilter(request, response);
        response.getWriter().write(&quot;&amp;lt;/p&amp;gt;&amp;lt;i&amp;gt;Powered by fipro&amp;lt;/i&amp;gt;&quot;);
    }

    @Override
    public void destroy() { }

}&lt;/pre&gt;
&lt;p&gt;To register a servlet filter the following criteria must match:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It needs to be registered as OSGi service of type &lt;code&gt;javax.servlet.Filter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;One of the given component properties needs to be set:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.filter.pattern&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.filter.regex&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.filter.servlet&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The service scope should be PROTOTYPE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For registering servlet filters the following service properties are supported. (see OSGi Compendium Specification Release 6 – Table 140.5):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.asyncSupported&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the servlet filter supports asynchronous operation mode. Allowed values are true and false independent of case. Defaults to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.dispatcher&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Select the dispatcher configuration when the&lt;br /&gt;
servlet filter should be called. Allowed string values are REQUEST, ASYNC, ERROR, INCLUDE, and FORWARD. The default for a filter is REQUEST.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.name&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The name of a servlet filter. This name is used as the value of the &lt;code&gt;FilterConfig.getFilterName()&lt;/code&gt; method and defaults to the fully qualified class name of the service object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.pattern&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Apply this servlet filter to the specified URL path patterns. The format of the patterns is specified in the servlet specification.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.regex&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Apply this servlet filter to the specified URL paths. The paths are specified as regular expressions following the syntax defined in the &lt;code&gt;java.util.regex.Pattern&lt;/code&gt; class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.servlet&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Apply this servlet filter to the referenced servlet(s) by name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;filter.init.*&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Properties starting with this prefix are passed as init parameters to the &lt;code&gt;Filter.init()&lt;/code&gt; method. The &lt;em&gt;filter.init.&lt;/em&gt; prefix is removed from the parameter name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Register Resources&lt;/h3&gt;
&lt;p&gt;It is also possible to register a service that informs the Http Whiteboard service about static resources like HTML files, images, CSS- or Javascript-files. For this a simple service can be registered that only needs to have the following two mandatory service properties set:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.resource.pattern&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The pattern(s) to be used to serve resources. As defined by the [4] Java Servlet 3.1 Specification in section 12.2, Specification of Mappings.This property marks the service as a resource service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.resource.prefix&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The prefix used to map a requested resource to the bundle’s entries. If the request’s path info is not null, it is appended to this prefix. The resulting&lt;br /&gt;
string is passed to the &lt;code&gt;getResource(String)&lt;/code&gt; method of the associated Servlet Context Helper.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The service does not need to implement any specific interface or function. All required information is provided via the component properties.&lt;/p&gt;
&lt;p&gt;To create a resource service follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a folder &lt;em&gt;resources&lt;/em&gt; in the project &lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add an image in that folder, e.g. &lt;em&gt;eclipse_logo.png&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PDE&lt;/strong&gt; – Add the &lt;em&gt;resources&lt;/em&gt; folder in the &lt;em&gt;build.properties&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bndtools&lt;/strong&gt; – Add the following line to the &lt;em&gt;bnd.bnd&lt;/em&gt; file on the &lt;em&gt;Source&lt;/em&gt; tab&lt;br /&gt;
&lt;code&gt;-includeresource: resources=resources&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create resource service&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service = ResourceService.class,
    property = {
        &quot;osgi.http.whiteboard.resource.pattern=/files/*&quot;,
        &quot;osgi.http.whiteboard.resource.prefix=/resources&quot;})
public class ResourceService { }&lt;/pre&gt;
&lt;p&gt;After starting the application the static resources located in the &lt;em&gt;resources&lt;/em&gt; folder are available via the &lt;em&gt;/files&lt;/em&gt; path in the URL, e.g. &lt;a href=&quot;http://localhost:8080/files/eclipse_logo.png&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/files/eclipse_logo.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
While writing this blog post I came across a very nasty issue. Because I initially registered the servlet filter for the &lt;em&gt;/*&lt;/em&gt; pattern, the simple header and footer where always added. This also caused setting the content type, that didn’t match the content type of the image of course. And so the static content was never shown correctly. So if you want to use servlet filters to add common headers and footers, you need to take care of the pattern so the servlet filter is not applied to static resources.&lt;/p&gt;
&lt;h3&gt;Register Servlet Listeners&lt;/h3&gt;
&lt;p&gt;It is also possible to register different servlet listeners as whiteboard services. The following listeners are supported according to the servlet specification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServletContextListener &lt;/code&gt;– Receive notifications when Servlet Contexts are initialized and destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServletContextAttributeListener &lt;/code&gt;– Receive notifications for Servlet Context attribute changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServletRequestListener &lt;/code&gt;– Receive notifications for servlet requests coming in and being destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServletRequestAttributeListener &lt;/code&gt;– Receive notifications when servlet Request attributes change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpSessionListener &lt;/code&gt;– Receive notifications when Http Sessions are created or destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpSessionAttributeListener &lt;/code&gt;– Receive notifications when Http Session attributes change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpSessionIdListener &lt;/code&gt;– Receive notifications when Http Session ID changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is only one component property needed to be set so the Http Whiteboard implementation is handling the listener.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.listener&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;When set to true this listener service is handled by the Http Whiteboard implementation. When not set or set to false the service is ignored. Any other value is invalid.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following example shows a simple &lt;code&gt;ServletRequestListener&lt;/code&gt; that prints out the client address on the console for each request (borrowed from the OSGi Compendium Specification):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(property = &quot;osgi.http.whiteboard.listener=true&quot;)
public class SimpleServletRequestListener
    implements ServletRequestListener {

    public void requestInitialized(ServletRequestEvent sre) {
        System.out.println(&quot;Request initialized for client: &quot;
            + sre.getServletRequest().getRemoteAddr());
    }

    public void requestDestroyed(ServletRequestEvent sre) {
        System.out.println(&quot;Request destroyed for client: &quot;
            + sre.getServletRequest().getRemoteAddr());
    }

}&lt;/pre&gt;
&lt;h3&gt;Servlet Context and Common Whiteboard Properties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ServletContext&lt;/code&gt; is specified in the servlet specification and provided to the servlets at runtime by the container. By default there is one &lt;code&gt;ServletContext&lt;/code&gt; and without additional information the servlets are registered to that default &lt;code&gt;ServletContext&lt;/code&gt; via the Http Whiteboard implementation. This could lead to scenarios where different bundles provide servlets for the same request mapping. In that case the &lt;em&gt;service.ranking&lt;/em&gt; will be inspected to decide which servlet should be delivered. If the servlets belong to different applications, it is possible to specify different contexts. This can be done by registering a custom &lt;code&gt;ServletContextHelper&lt;/code&gt; as whiteboard service and associate the servlets to the corresponding context. The &lt;code&gt;ServletContextHelper&lt;/code&gt; can be used to customize the behavior of the &lt;code&gt;ServletContext&lt;/code&gt; (e.g. handle security, provide resources, …) and to support multiple web-applications via different context paths.&lt;/p&gt;
&lt;p&gt;A custom &lt;code&gt;ServletContextHelper&lt;/code&gt; it needs to be registered as service of type &lt;code&gt;ServletContextHelper&lt;/code&gt; and needs to have the following two service properties set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.context.name&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.context.path&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.context.name&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Name of the Servlet Context Helper. This name can be referred to by Whiteboard services via the &lt;em&gt;osgi.http.whiteboard.context.select&lt;/em&gt; property. The syntax of the name is the same as the syntax for a Bundle Symbolic Name. The default Servlet Context Helper is named default. To override the&lt;br /&gt;
default, register a custom &lt;code&gt;ServletContextHelper&lt;/code&gt; service with the name default. If multiple Servlet Context Helper services are registered with the same name, the one with the highest Service Ranking is used. In case of a tie, the service with the lowest service ID wins. In other words, the normal OSGi service ranking applies.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.context.path&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Additional prefix to the context path for servlets. This property is mandatory. Valid characters are specified in IETF RFC 3986, section 3.3. The context path of the default Servlet Context Helper is /. A custom default Servlet Context Helper may use an alternative path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;context.init.*&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Properties starting with this prefix are provided as init parameters through the &lt;code&gt;ServletContext.getInitParameter()&lt;/code&gt; and &lt;code&gt;ServletContext.getInitParameterNames()&lt;/code&gt; methods. The &lt;em&gt;context.init.&lt;/em&gt; prefix is removed from the parameter name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following example will register a &lt;code&gt;ServletContextHelper&lt;/code&gt; for the context path &lt;em&gt;/eclipse&lt;/em&gt; and will retrieve resources from &lt;em&gt;http://www.eclipse.org&lt;/em&gt;. It is registered with BUNDLE service scope to ensure that every bundle gets its own instance, which is for example important to resolve resources from the correct bundle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Note:&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Create it in a new package &lt;code&gt;org.fipro.inverter.http.eclipse&lt;/code&gt; within the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project, as we will need to create some additional resources to show how this example actually works.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service = ServletContextHelper.class,
    scope = ServiceScope.BUNDLE,
    property = {
        &quot;osgi.http.whiteboard.context.name=eclipse&quot;,
        &quot;osgi.http.whiteboard.context.path=/eclipse&quot; })
public class EclipseServletContextHelper extends ServletContextHelper {

    public URL getResource(String name) {
        // remove the path from the name
        name = name.replace(&quot;/eclipse&quot;, &quot;&quot;);
        try {
            return new URL(&quot;http://www.eclipse.org/&quot; + name);
        } catch (MalformedURLException e) {
            return null;
        }
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
With PDE remember to add &lt;code&gt;org.osgi.service.http.context&lt;/code&gt; to the &lt;em&gt;Imported Packages&lt;/em&gt;. With Bndtools remember to add the new package to the &lt;em&gt;Private Packages&lt;/em&gt; in the &lt;em&gt;bnd.bnd&lt;/em&gt; file on the &lt;em&gt;Contents&lt;/em&gt; tab.&lt;/p&gt;
&lt;p&gt;To associate servlets, servlet filter, resources and listeners to a &lt;code&gt;ServletContextHelper&lt;/code&gt;, they share common service properties (see OSGi Compendium Specification Release 6 – Table 140.3) additional to the service specific properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.context.select&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;An LDAP-style filter to select the associated &lt;code&gt;ServletContextHelper&lt;/code&gt; service to use. Any service property of the Servlet Context Helper can be filtered on. If this property is missing the default Servlet Context Helper is used. For example, to select a Servlet Context Helper with name myCTX provide the following value:&lt;br /&gt;
&lt;code&gt;(osgi.http.whiteboard.context.name=myCTX)&lt;/code&gt;To select all Servlet Context Helpers provide the following value:&lt;br /&gt;
&lt;code&gt;(osgi.http.whiteboard.context.name=*)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.target&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The value of this service property is an LDAP style filter expression to select the Http Whiteboard implementation(s) to handle this Whiteboard service. The LDAP filter is used to match HttpServiceRuntime services. Each Http Whiteboard implementation exposes exactly one &lt;code&gt;HttpServiceRuntime&lt;/code&gt; service. This property is used to associate the Whiteboard service with the Http Whiteboard implementation that registered the &lt;code&gt;HttpServiceRuntime&lt;/code&gt; service. If this property is not specified, all Http Whiteboard implementations can handle the service.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following example will register a servlet only for the introduced &lt;em&gt;/eclipse&lt;/em&gt; context:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service=Servlet.class,
    property= {
        &quot;osgi.http.whiteboard.servlet.pattern=/image&quot;,
        &quot;osgi.http.whiteboard.context.select=(osgi.http.whiteboard.context.name=eclipse)&quot;
    },
    scope=ServiceScope.PROTOTYPE)
public class ImageServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType(&quot;text/html&quot;);
        resp.getWriter().write(&quot;Show an image from www.eclipse.org&quot;);
        resp.getWriter().write(
            &quot;&amp;lt;p&amp;gt;&amp;lt;img src='img/nattable/images/FeatureScreenShot.png'/&amp;gt;&amp;lt;/p&amp;gt;&quot;);
    }

}&lt;/pre&gt;
&lt;p&gt;And to make this work in combination with the introduced &lt;code&gt;ServletContextHelper&lt;/code&gt; we need to additionally register the resources for the &lt;em&gt;/img&lt;/em&gt; context, which is also only assigned to the &lt;em&gt;/eclipse&lt;/em&gt; context:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service = EclipseImageResourceService.class,
    property = {
        &quot;osgi.http.whiteboard.resource.pattern=/img/*&quot;,
        &quot;osgi.http.whiteboard.resource.prefix=/eclipse&quot;,
        &quot;osgi.http.whiteboard.context.select=(osgi.http.whiteboard.context.name=eclipse)&quot;})
public class EclipseImageResourceService { }&lt;/pre&gt;
&lt;p&gt;If you start the application and browse to &lt;a href=&quot;http://localhost:8080/eclipse/image&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/eclipse/image&lt;/a&gt; you will see an output from the servlet together with an image that is loaded from &lt;em&gt;http://www.eclipse.org&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The component properties and predefined values are available via &lt;code&gt;org.osgi.service.http.whiteboard.HttpWhiteboardConstants&lt;/code&gt;. So you don’t need to remember them all and can also retrieve some additional information about the properties via the corresponding Javadoc.&lt;/p&gt;
&lt;p&gt;The sources for this tutorial are hosted on GitHub in the already existing projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-pde&quot; target=&quot;_blank&quot;&gt;DS Getting Started (PDE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-bndtools&quot; target=&quot;_blank&quot;&gt;DS Getting Started (Bndtools)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Thu, 20 Apr 2017 05:58:50 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: IoT Developer Trends - 2017 Edition</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/U7fFDK-YfAc/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/U7fFDK-YfAc/</link>
	<description>The third annual IoT Developer Survey results are now available! What has changed in IoT this year?&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/U7fFDK-YfAc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Apr 2017 13:00:00 +0000</pubDate>
</item>

</channel>
</rss>
